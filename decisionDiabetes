import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score


# Load dataset
data = pd.read_csv("Dataset/diabetes (1).csv")


# Preprocess Data
X = StandardScaler().fit_transform(data.iloc[:, :-1])  # Features
y = data.iloc[:, -1]  # Target


# Define entropy and gini index functions
entropy = lambda y: -np.sum((np.unique(y, return_counts=True)[1] / len(y)) * np.log2(np.unique(y, return_counts=True)[1] / len(y)))
gini = lambda y: 1 - np.sum((np.unique(y, return_counts=True)[1] / len(y))**2)


# Print entropy and gini index
print(f"\nEntropy: {entropy(y):.4f}, Gini Index: {gini(y):.4f}")


# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)


# Train Decision Tree Classifier
tree_model = DecisionTreeClassifier(criterion='gini', max_depth=4, random_state=0).fit(X_train, y_train)


# Evaluate model
print(f"\nTest Accuracy: {accuracy_score(y_test, tree_model.predict(X_test)) * 100:.2f}%")
# Plot Decision Tree
plt.figure(figsize=(20, 10))
plot_tree(tree_model, feature_names=data.columns[:-1], class_names=["No Diabetes", "Diabetes"], filled=True, rounded=True)
plt.title("Decision Tree for Diabetes Classification")
plt.show()
